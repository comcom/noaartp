#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace rtpupdate
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="rtp")]
	public partial class rtpdbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDataValue(DataValue instance);
    partial void UpdateDataValue(DataValue instance);
    partial void DeleteDataValue(DataValue instance);
    partial void InsertStation(Station instance);
    partial void UpdateStation(Station instance);
    partial void DeleteStation(Station instance);
    #endregion
		
		public rtpdbDataContext() : 
				base(global::rtpupdate.Properties.Settings.Default.rtpConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public rtpdbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rtpdbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rtpdbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public rtpdbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DataValue> DataValues
		{
			get
			{
				return this.GetTable<DataValue>();
			}
		}
		
		public System.Data.Linq.Table<Station> Stations
		{
			get
			{
				return this.GetTable<Station>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataValues")]
	public partial class DataValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecordID;
		
		private int _StationID;
		
		private System.DateTime _Date;
		
		private System.Nullable<double> _Rainfall;
		
		private System.Nullable<int> _High;
		
		private System.Nullable<int> _Low;
		
		private EntityRef<Station> _Station;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecordIDChanging(int value);
    partial void OnRecordIDChanged();
    partial void OnStationIDChanging(int value);
    partial void OnStationIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnRainfallChanging(System.Nullable<double> value);
    partial void OnRainfallChanged();
    partial void OnHighChanging(System.Nullable<int> value);
    partial void OnHighChanged();
    partial void OnLowChanging(System.Nullable<int> value);
    partial void OnLowChanged();
    #endregion
		
		public DataValue()
		{
			this._Station = default(EntityRef<Station>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationID", DbType="Int NOT NULL")]
		public int StationID
		{
			get
			{
				return this._StationID;
			}
			set
			{
				if ((this._StationID != value))
				{
					if (this._Station.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStationIDChanging(value);
					this.SendPropertyChanging();
					this._StationID = value;
					this.SendPropertyChanged("StationID");
					this.OnStationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rainfall", DbType="Float")]
		public System.Nullable<double> Rainfall
		{
			get
			{
				return this._Rainfall;
			}
			set
			{
				if ((this._Rainfall != value))
				{
					this.OnRainfallChanging(value);
					this.SendPropertyChanging();
					this._Rainfall = value;
					this.SendPropertyChanged("Rainfall");
					this.OnRainfallChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_High", DbType="Int")]
		public System.Nullable<int> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Low", DbType="Int")]
		public System.Nullable<int> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_DataValue", Storage="_Station", ThisKey="StationID", OtherKey="StationID", IsForeignKey=true)]
		public Station Station
		{
			get
			{
				return this._Station.Entity;
			}
			set
			{
				Station previousValue = this._Station.Entity;
				if (((previousValue != value) 
							|| (this._Station.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Station.Entity = null;
						previousValue.DataValues.Remove(this);
					}
					this._Station.Entity = value;
					if ((value != null))
					{
						value.DataValues.Add(this);
						this._StationID = value.StationID;
					}
					else
					{
						this._StationID = default(int);
					}
					this.SendPropertyChanged("Station");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stations")]
	public partial class Station : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StationID;
		
		private string _StationSymbol;
		
		private string _StationName;
		
		private System.Nullable<System.DateTime> _LastHarvestDate;
		
		private string _StationURL;
		
		private EntitySet<DataValue> _DataValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStationIDChanging(int value);
    partial void OnStationIDChanged();
    partial void OnStationSymbolChanging(string value);
    partial void OnStationSymbolChanged();
    partial void OnStationNameChanging(string value);
    partial void OnStationNameChanged();
    partial void OnLastHarvestDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastHarvestDateChanged();
    partial void OnStationURLChanging(string value);
    partial void OnStationURLChanged();
    #endregion
		
		public Station()
		{
			this._DataValues = new EntitySet<DataValue>(new Action<DataValue>(this.attach_DataValues), new Action<DataValue>(this.detach_DataValues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StationID
		{
			get
			{
				return this._StationID;
			}
			set
			{
				if ((this._StationID != value))
				{
					this.OnStationIDChanging(value);
					this.SendPropertyChanging();
					this._StationID = value;
					this.SendPropertyChanged("StationID");
					this.OnStationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationSymbol", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StationSymbol
		{
			get
			{
				return this._StationSymbol;
			}
			set
			{
				if ((this._StationSymbol != value))
				{
					this.OnStationSymbolChanging(value);
					this.SendPropertyChanging();
					this._StationSymbol = value;
					this.SendPropertyChanged("StationSymbol");
					this.OnStationSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string StationName
		{
			get
			{
				return this._StationName;
			}
			set
			{
				if ((this._StationName != value))
				{
					this.OnStationNameChanging(value);
					this.SendPropertyChanging();
					this._StationName = value;
					this.SendPropertyChanged("StationName");
					this.OnStationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastHarvestDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastHarvestDate
		{
			get
			{
				return this._LastHarvestDate;
			}
			set
			{
				if ((this._LastHarvestDate != value))
				{
					this.OnLastHarvestDateChanging(value);
					this.SendPropertyChanging();
					this._LastHarvestDate = value;
					this.SendPropertyChanged("LastHarvestDate");
					this.OnLastHarvestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationURL", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string StationURL
		{
			get
			{
				return this._StationURL;
			}
			set
			{
				if ((this._StationURL != value))
				{
					this.OnStationURLChanging(value);
					this.SendPropertyChanging();
					this._StationURL = value;
					this.SendPropertyChanged("StationURL");
					this.OnStationURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_DataValue", Storage="_DataValues", ThisKey="StationID", OtherKey="StationID")]
		public EntitySet<DataValue> DataValues
		{
			get
			{
				return this._DataValues;
			}
			set
			{
				this._DataValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Station = this;
		}
		
		private void detach_DataValues(DataValue entity)
		{
			this.SendPropertyChanging();
			entity.Station = null;
		}
	}
}
#pragma warning restore 1591
